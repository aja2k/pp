name: Release Helm Charts

# GitHub Actions 권한 설정
permissions:
  contents: write      # helm-docs push를 위한 쓰기 권한 필요
  pages: write        # GitHub Pages 배포 권한
  id-token: write     # OIDC 토큰 생성 권한
  pull-requests: write # PR 생성 및 수정 권한 (필요시)
  issues: write       # 이슈 생성 및 수정 권한 (필요시)
  packages: write     # 패키지 업로드 권한
  deployments: write  # 배포 권한

on:
  push:
    branches: [ "main" ]
    paths:
      - 'projects/*/example/helmcharts/**'
      - '.github/workflows/helm-release.yml'
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Install helm-docs
        run: |
          wget https://github.com/norwoodj/helm-docs/releases/download/v1.11.0/helm-docs_1.11.0_Linux_x86_64.tar.gz
          tar -xvf helm-docs_1.11.0_Linux_x86_64.tar.gz
          sudo mv helm-docs /usr/local/bin/helm-docs

      - name: Generate Helm Docs
        run: |
          WORKSPACE="${GITHUB_WORKSPACE}"
          
          # 각 프로젝트 순회
          for project in ${WORKSPACE}/projects/*; do
            if [ -d "$project/example/helmcharts" ]; then
              cd $project/example/helmcharts
              
              # 각 환경별 문서 생성
              for env in dev stg prd; do
                if [ -d "$env" ]; then
                  for chart in $env/*; do
                    if [ -d "$chart" ]; then
                      echo "Generating docs for $chart"
                      helm-docs -c "$chart"
                    fi
                  done
                fi
              done
              
              cd ${WORKSPACE}
            fi
          done

      - name: Commit and Push Helm Docs
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "Git Status for Helm Docs:"
          git status
          
          # 변경된 helm-docs 문서만 추가
          if git status --porcelain | grep "projects/.*/example/helmcharts/.*/README.md"; then
            echo "Changes detected in helm chart docs"
            git add "projects/*/example/helmcharts/**/README.md"
            git commit -m "Update helm chart documentation [skip ci]"
            git push
          else
            echo "No changes in helm chart docs"
          fi

      - name: Create releases directories
        run: |
          mkdir -p helm-repo

      - name: Package Helm Charts
        run: |
          WORKSPACE="${GITHUB_WORKSPACE}"
          
          # 각 프로젝트 순회
          for project in ${WORKSPACE}/projects/*; do
            if [ -d "$project/example/helmcharts" ]; then
              project_name=$(basename $project)
              echo "Processing project: $project_name"
              
              # 환경별 디렉토리 생성
              mkdir -p helm-repo/${project_name}/{dev,stg,prd}
              
              cd $project/example/helmcharts
              
              # DEV 환경 차트 패키징
              if [ -d "dev" ]; then
                for dir in dev/*; do
                  if [ -d "$dir" ] && [ -f "$dir/Chart.yaml" ]; then
                    echo "Packaging DEV chart: $dir"
                    helm package "$dir" --destination ${WORKSPACE}/helm-repo/${project_name}/dev/
                  else
                    echo "Skipping non-helm chart directory: $dir"
                  fi
                done
              fi
              
              # STG 환경 차트 패키징
              if [ -d "stg" ]; then
                for dir in stg/*; do
                  if [ -d "$dir" ] && [ -f "$dir/Chart.yaml" ]; then
                    echo "Packaging STG chart: $dir"
                    helm package "$dir" --destination ${WORKSPACE}/helm-repo/${project_name}/stg/
                  else
                    echo "Skipping non-helm chart directory: $dir"
                  fi
                done
              fi
              
              # PRD 환경 차트 패키징
              if [ -d "prd" ]; then
                for dir in prd/*; do
                  if [ -d "$dir" ] && [ -f "$dir/Chart.yaml" ]; then
                    echo "Packaging PRD chart: $dir"
                    helm package "$dir" --destination ${WORKSPACE}/helm-repo/${project_name}/prd/
                  else
                    echo "Skipping non-helm chart directory: $dir"
                  fi
                done
              fi
              
              cd ${WORKSPACE}
            fi
          done

      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/download/v4.35.1/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Create index.yaml files and Documentation
        run: |
          # helm-repo 디렉토리 생성
          mkdir -p helm-repo
          
          # README.md 시작
          echo "# Helm Chart Repository" > helm-repo/README.md
          echo "" >> helm-repo/README.md
          echo "## Available Charts" >> helm-repo/README.md
          echo "" >> helm-repo/README.md
          
          # 각 프로젝트의 환경별 index.yaml 생성
          for project_dir in helm-repo/*; do
            if [ -d "$project_dir" ]; then
              project_name=$(basename $project_dir)
              
              echo "### ${project_name}" >> helm-repo/README.md
              echo "" >> helm-repo/README.md
              
              # DEV 환경 처리
              if [ -d "$project_dir/dev" ]; then
                helm repo index --url https://aja2k.github.io/pp/helm-repo/${project_name}/dev/ $project_dir/dev/
                
                echo "#### DEV Environment" >> helm-repo/README.md
                echo "\`\`\`bash" >> helm-repo/README.md
                echo "helm repo add ${project_name}-dev https://aja2k.github.io/pp/helm-repo/${project_name}/dev" >> helm-repo/README.md
                echo "\`\`\`" >> helm-repo/README.md
                echo "" >> helm-repo/README.md
                echo "Available Charts:" >> helm-repo/README.md
                echo "\`\`\`" >> helm-repo/README.md
                yq eval '.entries | keys | .[]' $project_dir/dev/index.yaml | while read chart; do
                  version=$(yq eval ".entries.\"$chart\"[0].version" $project_dir/dev/index.yaml)
                  description=$(yq eval ".entries.\"$chart\"[0].description" $project_dir/dev/index.yaml)
                  echo "- $chart (version: $version)" >> helm-repo/README.md
                  echo "  $description" >> helm-repo/README.md
                done
                echo "\`\`\`" >> helm-repo/README.md
                echo "" >> helm-repo/README.md
              fi
              
              # STG 환경 처리
              if [ -d "$project_dir/stg" ]; then
                helm repo index --url https://aja2k.github.io/pp/helm-repo/${project_name}/stg/ $project_dir/stg/
                
                echo "#### STG Environment" >> helm-repo/README.md
                echo "\`\`\`bash" >> helm-repo/README.md
                echo "helm repo add ${project_name}-stg https://aja2k.github.io/pp/helm-repo/${project_name}/stg" >> helm-repo/README.md
                echo "\`\`\`" >> helm-repo/README.md
                echo "" >> helm-repo/README.md
                echo "Available Charts:" >> helm-repo/README.md
                echo "\`\`\`" >> helm-repo/README.md
                yq eval '.entries | keys | .[]' $project_dir/stg/index.yaml | while read chart; do
                  version=$(yq eval ".entries.\"$chart\"[0].version" $project_dir/stg/index.yaml)
                  description=$(yq eval ".entries.\"$chart\"[0].description" $project_dir/stg/index.yaml)
                  echo "- $chart (version: $version)" >> helm-repo/README.md
                  echo "  $description" >> helm-repo/README.md
                done
                echo "\`\`\`" >> helm-repo/README.md
                echo "" >> helm-repo/README.md
              fi
              
              # PRD 환경 처리
              if [ -d "$project_dir/prd" ]; then
                helm repo index --url https://aja2k.github.io/pp/helm-repo/${project_name}/prd/ $project_dir/prd/
                
                echo "#### PRD Environment" >> helm-repo/README.md
                echo "\`\`\`bash" >> helm-repo/README.md
                echo "helm repo add ${project_name}-prd https://aja2k.github.io/pp/helm-repo/${project_name}/prd" >> helm-repo/README.md
                echo "\`\`\`" >> helm-repo/README.md
                echo "" >> helm-repo/README.md
                echo "Available Charts:" >> helm-repo/README.md
                echo "\`\`\`" >> helm-repo/README.md
                yq eval '.entries | keys | .[]' $project_dir/prd/index.yaml | while read chart; do
                  version=$(yq eval ".entries.\"$chart\"[0].version" $project_dir/prd/index.yaml)
                  description=$(yq eval ".entries.\"$chart\"[0].description" $project_dir/prd/index.yaml)
                  echo "- $chart (version: $version)" >> helm-repo/README.md
                  echo "  $description" >> helm-repo/README.md
                done
                echo "\`\`\`" >> helm-repo/README.md
                echo "" >> helm-repo/README.md
              fi
            fi
          done

      - name: Commit and Push Repository Documentation
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "Git Status for Helm Repository:"
          git status
          
          # 디버깅을 위한 디렉토리 확인
          echo "Directory contents:"
          ls -la helm-repo/
          
          # helm-repo 디렉토리 전체를 강제로 추가
          git add -f helm-repo/
          
          # 변경사항 확인
          if git status --porcelain | grep "helm-repo/"; then
            echo "Changes detected in helm repository"
            git commit -m "Update helm repository [skip ci]"
            git push origin main
            echo "Successfully pushed helm repository"
          else
            echo "No changes in helm repository"
          fi

      # GitHub Pages 배포를 위한 설정
      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          enablement: true  # Pages 활성화
          token: ${{ secrets.GITHUB_TOKEN }}  # 토큰 명시

      # helm-repo 디렉토리 구조 유지하면서 _site로 복사
      - name: Prepare GitHub Pages structure
        run: |
          mkdir -p _site/helm-repo
          cp -r helm-repo/* _site/helm-repo/

      # GitHub Pages 아티팩트 업로드
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

      # GitHub Pages 배포
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

