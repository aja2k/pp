name: Release Helm Charts and Deploy Pages

permissions:
  contents: write
  pages: write
  id-token: write
  deployments: write

on:
  push:
    branches: [ "main" ]
    paths:
      - 'projects/*/example/helmcharts/**'
      - '.github/workflows/*'
      - 'css/**'
      - 'js/**'
      - 'libs/**'
      - 'images/**'
      - 'index.html'
      - 'sass/**'
      - 'package.json'
      - 'gulpfile.js'
  workflow_dispatch:

jobs:
  helm-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Install helm-docs
        run: |
          wget https://github.com/norwoodj/helm-docs/releases/download/v1.11.0/helm-docs_1.11.0_Linux_x86_64.tar.gz
          tar -xvf helm-docs_1.11.0_Linux_x86_64.tar.gz
          sudo mv helm-docs /usr/local/bin/helm-docs

      - name: Generate Helm Docs
        run: |
          WORKSPACE="${GITHUB_WORKSPACE}"
          
          # 각 프로젝트 순회
          for project in ${WORKSPACE}/projects/*; do
            if [ -d "$project/example/helmcharts" ]; then
              cd $project/example/helmcharts
              
              # 각 환경별 문서 생성
              for env in dev stg prd; do
                if [ -d "$env" ]; then
                  for chart in $env/*; do
                    if [ -d "$chart" ]; then
                      echo "Generating docs for $chart"
                      helm-docs -c "$chart"
                    fi
                  done
                fi
              done
              
              cd ${WORKSPACE}
            fi
          done

      - name: Commit and Push Helm Docs
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "Git Status for Helm Docs:"
          git status
          
          # 변경된 helm-docs 문서만 추가
          if git status --porcelain | grep "projects/.*/example/helmcharts/.*/README.md"; then
            echo "Changes detected in helm chart docs"
            git add "projects/*/example/helmcharts/**/README.md"
            git commit -m "Update helm chart documentation [skip ci]"
            git push
          else
            echo "No changes in helm chart docs"
          fi

      - name: Create releases directories
        run: |
          mkdir -p helm-repo

      - name: Package Helm Charts
        run: |
          WORKSPACE="${GITHUB_WORKSPACE}"
          
          # 각 프로젝트 순회
          for project in ${WORKSPACE}/projects/*; do
            if [ -d "$project/example/helmcharts" ]; then
              project_name=$(basename $project)
              echo "Processing project: $project_name"
              
              # 환경별 디렉토리 생성
              mkdir -p helm-repo/${project_name}/{dev,stg,prd}
              
              cd $project/example/helmcharts
              
              # DEV 환경 차트 패키징
              if [ -d "dev" ]; then
                for dir in dev/*; do
                  if [ -d "$dir" ] && [ -f "$dir/Chart.yaml" ]; then
                    echo "Packaging DEV chart: $dir"
                    helm package "$dir" --destination ${WORKSPACE}/helm-repo/${project_name}/dev/
                  else
                    echo "Skipping non-helm chart directory: $dir"
                  fi
                done
              fi
              
              # STG 환경 차트 패키징
              if [ -d "stg" ]; then
                for dir in stg/*; do
                  if [ -d "$dir" ] && [ -f "$dir/Chart.yaml" ]; then
                    echo "Packaging STG chart: $dir"
                    helm package "$dir" --destination ${WORKSPACE}/helm-repo/${project_name}/stg/
                  else
                    echo "Skipping non-helm chart directory: $dir"
                  fi
                done
              fi
              
              # PRD 환경 차트 패키징
              if [ -d "prd" ]; then
                for dir in prd/*; do
                  if [ -d "$dir" ] && [ -f "$dir/Chart.yaml" ]; then
                    echo "Packaging PRD chart: $dir"
                    helm package "$dir" --destination ${WORKSPACE}/helm-repo/${project_name}/prd/
                  else
                    echo "Skipping non-helm chart directory: $dir"
                  fi
                done
              fi
              
              cd ${WORKSPACE}
            fi
          done

      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/download/v4.35.1/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Create index.yaml files and Documentation
        run: |
          # helm-repo 디렉토리 생성
          mkdir -p helm-repo
          
          # README.md 시작
          echo "# Helm Chart Repository" > helm-repo/README.md
          echo "" >> helm-repo/README.md
          echo "## Available Charts" >> helm-repo/README.md
          echo "" >> helm-repo/README.md
          
          # 각 프로젝트의 환경별 index.yaml 생성
          for project_dir in helm-repo/*; do
            if [ -d "$project_dir" ]; then
              project_name=$(basename $project_dir)
              
              echo "### ${project_name}" >> helm-repo/README.md
              echo "" >> helm-repo/README.md
              
              # DEV 환경 처리
              if [ -d "$project_dir/dev" ]; then
                helm repo index --url https://aja2k.github.io/pp/helm-repo/${project_name}/dev/ $project_dir/dev/
                
                echo "#### DEV Environment" >> helm-repo/README.md
                echo "\`\`\`bash" >> helm-repo/README.md
                echo "helm repo add ${project_name}-dev https://aja2k.github.io/pp/helm-repo/${project_name}/dev" >> helm-repo/README.md
                echo "\`\`\`" >> helm-repo/README.md
                echo "" >> helm-repo/README.md
                echo "Available Charts:" >> helm-repo/README.md
                echo "\`\`\`" >> helm-repo/README.md
                yq eval '.entries | keys | .[]' $project_dir/dev/index.yaml | while read chart; do
                  version=$(yq eval ".entries.\"$chart\"[0].version" $project_dir/dev/index.yaml)
                  description=$(yq eval ".entries.\"$chart\"[0].description" $project_dir/dev/index.yaml)
                  echo "- $chart (version: $version)" >> helm-repo/README.md
                  echo "  $description" >> helm-repo/README.md
                done
                echo "\`\`\`" >> helm-repo/README.md
                echo "" >> helm-repo/README.md
              fi
              
              # STG 환경 처리
              if [ -d "$project_dir/stg" ]; then
                helm repo index --url https://aja2k.github.io/pp/helm-repo/${project_name}/stg/ $project_dir/stg/
                
                echo "#### STG Environment" >> helm-repo/README.md
                echo "\`\`\`bash" >> helm-repo/README.md
                echo "helm repo add ${project_name}-stg https://aja2k.github.io/pp/helm-repo/${project_name}/stg" >> helm-repo/README.md
                echo "\`\`\`" >> helm-repo/README.md
                echo "" >> helm-repo/README.md
                echo "Available Charts:" >> helm-repo/README.md
                echo "\`\`\`" >> helm-repo/README.md
                yq eval '.entries | keys | .[]' $project_dir/stg/index.yaml | while read chart; do
                  version=$(yq eval ".entries.\"$chart\"[0].version" $project_dir/stg/index.yaml)
                  description=$(yq eval ".entries.\"$chart\"[0].description" $project_dir/stg/index.yaml)
                  echo "- $chart (version: $version)" >> helm-repo/README.md
                  echo "  $description" >> helm-repo/README.md
                done
                echo "\`\`\`" >> helm-repo/README.md
                echo "" >> helm-repo/README.md
              fi
              
              # PRD 환경 처리
              if [ -d "$project_dir/prd" ]; then
                helm repo index --url https://aja2k.github.io/pp/helm-repo/${project_name}/prd/ $project_dir/prd/
                
                echo "#### PRD Environment" >> helm-repo/README.md
                echo "\`\`\`bash" >> helm-repo/README.md
                echo "helm repo add ${project_name}-prd https://aja2k.github.io/pp/helm-repo/${project_name}/prd" >> helm-repo/README.md
                echo "\`\`\`" >> helm-repo/README.md
                echo "" >> helm-repo/README.md
                echo "Available Charts:" >> helm-repo/README.md
                echo "\`\`\`" >> helm-repo/README.md
                yq eval '.entries | keys | .[]' $project_dir/prd/index.yaml | while read chart; do
                  version=$(yq eval ".entries.\"$chart\"[0].version" $project_dir/prd/index.yaml)
                  description=$(yq eval ".entries.\"$chart\"[0].description" $project_dir/prd/index.yaml)
                  echo "- $chart (version: $version)" >> helm-repo/README.md
                  echo "  $description" >> helm-repo/README.md
                done
                echo "\`\`\`" >> helm-repo/README.md
                echo "" >> helm-repo/README.md
              fi
            fi
          done

      - name: Commit and Push Repository Documentation
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "Git Status for Helm Repository:"
          git status
          
          # 디버깅을 위한 디렉토리 확인
          echo "Directory contents:"
          ls -la helm-repo/
          
          # helm-repo 디렉토리 전체를 강제로 추가
          git add -f helm-repo/README.md
          
          # 변경사항 확인
          if git status --porcelain | grep "helm-repo/README.md"; then
            echo "Changes detected in helm repository"
            git commit -m "Update helm repository [skip ci]"
            git push origin main
            echo "Successfully pushed helm repository"
          else
            echo "No changes in helm repository"
          fi

      - name: Create helm-repo artifact
        run: |
          tar -czf helm-repo.tar.gz helm-repo/
        
      - name: Upload helm-repo artifact
        uses: actions/upload-artifact@v3
        with:
          name: helm-repo
          path: helm-repo.tar.gz

  pages-deploy:
    needs: helm-release
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '12'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm install -g gulp-cli
          npm install --legacy-peer-deps

      - name: Build assets
        run: gulp

      - name: Prepare site directory
        run: |
          # 정적 사이트 파일들을 _site로 복사
          mkdir -p _site
          cp -r css js libs images index.html icons-preview.html _site/
          
          # gulp로 생성된 다른 assets가 있다면 복사
          if [ -d "dist" ]; then
            cp -r dist/* _site/
          fi
          
          echo "Static site files:"
          ls -la _site/

      - name: Download helm-repo artifact
        uses: actions/download-artifact@v3
        with:
          name: helm-repo

      - name: Extract helm-repo
        run: |
          tar -xzf helm-repo.tar.gz
          cp -r helm-repo _site/
          rm helm-repo.tar.gz
          
          echo "Final _site structure:"
          find _site -type f

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Verify Deployment
        run: |
          MAX_RETRIES=5
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "Attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES"
            sleep 30
            
            # 정적 사이트 확인
            SITE_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://aja2k.github.io/pp/index.html)
            # Helm 저장소 확인
            HELM_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://aja2k.github.io/pp/helm-repo/project-a/dev/index.yaml)
            
            if [ "$SITE_CODE" = "200" ] && [ "$HELM_CODE" = "200" ]; then
              echo "All deployments verified successfully!"
              exit 0
            else
              echo "Site status: $SITE_CODE, Helm status: $HELM_CODE"
              echo "Deployment not ready, retrying..."
              RETRY_COUNT=$((RETRY_COUNT + 1))
            fi
          done
          
          echo "Failed to verify deployment after $MAX_RETRIES attempts"
          exit 1

